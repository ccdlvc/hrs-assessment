services:

  api-gateway:
    build:
      context: ./api-gateway
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      mysql-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      QUARKUS_APPLICATION_NAME: api-gateway
      QUARKUS_DATASOURCE_DB_KIND: mysql
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://mysql-db:3306/hrs_booking
      QUARKUS_DATASOURCE_USERNAME: hrs
      QUARKUS_DATASOURCE_PASSWORD: hrs.com
      QUARKUS_DATASOURCE_JDBC_TELEMETRY: true
      QUARKUS_DATASOURCE_JDBC_TRANSACTION_ISOLATION_LEVEL: serializable
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: none
      QUARKUS_HIBERNATE_ORM_LOG_SQL: true
      QUARKUS_REDIS_HOSTS: redis://redis:6379
      QUARKUS_MICROMETER_EXPORT_PROMETHEUS_ENABLED: true
      QUARKUS_MICROMETER_EXPORT_PROMETHEUS_PATH: /metrics
      QUARKUS_MICROMETER_BINDER_HTTP_SERVER_ENABLED: true
      QUARKUS_MICROMETER_BINDER_HTTP_SERVER_REQUESTS_PERCENTILES: 0.5,0.95,0.99
      QUARKUS_MICROMETER_BINDER_HTTP_SERVER_IGNORE_PATTERNS: /q/dev/.*
      QUARKUS_MICROMETER_BINDER_JVM_ENABLED: true
      QUARKUS_MICROMETER_BINDER_SYSTEM_ENABLED: true
      QUARKUS_OPENTELEMETRY_ENABLED: true
      QUARKUS_OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      QUARKUS_ELASTICSEARCH_HOSTS: elasticsearch:9200
      QUARKUS_ELASTICSEARCH_USERNAME: elastic
      QUARKUS_ELASTICSEARCH_PASSWORD: hrs.com
      QUARKUS_SWAGGER_UI_ALWAYS_INCLUDE: true
      QUARKUS_SMALLRYE_OPENAPI_PATH: /q/openapi
      QUARKUS_SWAGGER_UI_PATH: /swagger-ui
      QUARKUS_SWAGGER_UI_ENABLE: true
      QUARKUS_LOG_LEVEL: DEBUG
      QUARKUS_LOG_CONSOLE_LEVEL: DEBUG
      QUARKUS_LOG_CONSOLE_JSON: false
      QUARKUS_LOG_SOCKET_ENABLE: true
      QUARKUS_LOG_SOCKET_JSON: true
      QUARKUS_LOG_SOCKET_JSON_LOG_FORMAT: ECS
      QUARKUS_LOG_SOCKET_ENDPOINT: logstash:5044
      QUARKUS_LOG_SOCKET_JSON_EXCEPTION_OUTPUT_TYPE: formatted
    networks:
      - app-network

  mysql-db:
    image: mysql:8.0
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: hrs.com
      MYSQL_DATABASE: hrs_booking
      MYSQL_USER: hrs
      MYSQL_PASSWORD: hrs.com
    volumes:
      - mysql_data:/var/lib/mysql
      - ./infras/databases/init.sql:/docker-entrypoint-initdb.d/init.sql
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-phrs.com"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
      JAVA_OPTS: -Djava.net.preferIPv4Stack=true
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_NUM_PARTITIONS: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT"
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_JMX_PORT: 9999
      JMX_PORT: 9999
    ports:
      - "9092:9092"
      - "9999:9999"
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafka-connect:
    build:
      context: ./infras/kafka-connect
    restart: always
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: kafka-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: kafka-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: kafka-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "ERROR"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
      CONNECT_JMX_PORT: 10001
    depends_on:
      - kafka
      - zookeeper
      - mysql-db
    ports:
      - "8083:8083"
      - "10001:10001"
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    environment:
      discovery.type: single-node
      ELASTIC_HOSTS: http://elasticsearch:9200
      ELASTIC_PASSWORD: hrs.com
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      xpack.security.enabled: false
      ingest.geoip.downloader.enabled: false
      cluster.routing.allocation.disk.threshold_enabled: false
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health?wait_for_status=green 2>/dev/null || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 100
      start_period: 600s
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network

  elasticsearch-exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
    restart: always
    ports:
      - "9114:9114"  # Prometheus will scrape metrics from here
    environment:
      ES_URI: "http://elasticsearch:9200"
      ES_USERNAME: "elastic"
      ES_PASSWORD: "hrs.com"
    networks:
      - app-network
    depends_on:
      - elasticsearch


  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    environment:
      ELASTIC_HOSTS: http://elasticsearch:9200
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: hrs.com
      JAVA_TOOL_OPTIONS: -XX:+UseContainerSupport -XX:+UseCGroupMemoryLimitForHeap
    ports:
      - "5044:5044"
    volumes:
      - ./infras/configs/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_PASSWORD: hrs.com
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./infras/configs/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - mysql-db
      - redis
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: hrs.com
      GF_INSTALL_PLUGINS: "hamedkarbasi93-kafka-datasource,grafana-piechart-panel"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infras/configs/grafana_datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./infras/grafana/provisioning/:/etc/grafana/provisioning/
      - ./infras/grafana/plugins:/var/lib/grafana/plugins
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Receive legacy OpenTracing traces, optional
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "14250:14250" # Receive from external otel-collector, optional
      - "14269:14269"  # Prometheus metrics endpoint
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - app-network

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data: 
  kafka_connect_data:      

networks:
  app-network:
    driver: bridge